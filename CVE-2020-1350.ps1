<#
# By Graph-Inc
# Based on Scanner by https://github.com/T13nn3s/CVE-2020-1350
#>

If (-NOT ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")) {   
    $arguments = "& '" + $myinvocation.mycommand.definition + "'"
    Start-Process powershell -Verb runAs -ArgumentList $arguments
    Break
}

function CheckForDNSServer {
    Write-Host "[*] Checking for the Windows DNS Service..."
    $DNSService = Get-Service | where-object { $_.name -like "DNS" } -ErrorAction SilentlyContinue
    if ($DNSService.Status -eq "Running") {
        Write-Host "[+] This server is acting as an Windows DNS Server. CVE-2020-1350 is applicable to this Windows Server." -ForegroundColor DarkYellow
        $ret = 1
        $ret
        return

    }
    Else {
        Write-Host "[+] This server is NOT acting as an Windows DNS Server. CVE-2020-1350 is not applicable to this Windows Server." -ForegroundColor Green
        $ret = 0
        $ret
        return
    } 
}
function CheckIfUpdateIsInstalled {

	$KBs = @('KB4558998','KB4565483','KB4565511','KB4565524','KB4565529','KB4565535','KB4565536','KB4565537','KB4565539','KB4565540','KB4565541','KB4565503')
	
    Write-Host "[*] Check if Patch is installed..."

    $fix = Get-HotFix -ErrorAction SilentlyContinue
    foreach ($kb in $fix.hotfixid)
	{
		if ( $KBs -contains $kb ) {
			Write-Host "[+] *** Windows Update is installed. You're not vulnerable ***" -f Green
            $resut = 1
            $result
			return
		}
	}
    
	Write-Host "[-] Windows Update for CVE-2020-1350 is not installed." -f Red

    $result = 0
    $result
	return
    	
}

function Get-Menu {
    param (
        [string]$title = "CVE-2020-1350 check & workaround By Graph-Inc"
    )
    Write-Host ""
    Write-Host "================ $title ================"

    Write-Host "1: Press '1' for check if this server is vulnerable for CVE-2020-1350" 
    Write-Host "2: Press '2' to apply the CVE-2020-1350 workaround to this server (NOTICE: The Windows DNS Service will be restarted!)"
    Write-Host "Q: Press 'Q' to quit."
}

function CheckRegDNS {
    param (
        [string]$reg = "HKLM:\SYSTEM\CurrentControlSet\Services\DNS\Parameters"
    )
    $size = "0xFF00"
    $check = Get-ItemProperty -Path $reg -Name "TcpReceivePacketSize" -ErrorAction SilentlyContinue

    $result = 0
    if ($check.TcpReceivePacketSize -eq $size) {
        Write-Host "[+] Workaround is applied to this server."
        Write-Host "[-] You're not vulnerable" -f Green
        $result = 1
    }
    Else {
        Write-Host "[*] Workaround is not applied." -f DarkYellow
        Write-Host "[-] You're vulnerable" -f Red
        $result = 0
    }

    $result
    return
}

function SetDNSRegWorkaround {
    Write-Host "[*] Setting the workaround in the registry..."
        $reg = "HKLM:\SYSTEM\CurrentControlSet\Services\DNS\Parameters"
        $value = "0xFF00"

    try {
        Set-ItemProperty -Path $reg -name TcpReceivePacketSize -Type DWORD -value $value -Force
        Write-Host "[+] Setting the workaround in the registry...Done"
    }
    Catch {
        $err = $_.Exception.Message
        Write-Error $err
    }

    Write-Host "[*] Restarting Windows DNS Service..."
    try {
        restart-service DNS
        Write-Host "[+] DNS Service is restarted"
    }
    Catch {
        $err = $_.Exception.Message
        Write-Error $err
    }
    CheckRegDNS
}



$result = CheckForDNSServer

if ($result -eq 1){

    $result = CheckIfUpdateIsInstalled
    if ($result -eq 1){
        return
    }

    $result = CheckRegDNS
    if ($result -eq 1){
        return
    }

    Do {
    Get-Menu
    $HumanInput = Read-Host "Please make a selection"
    switch ($HumanInput) {
        '1' {
            Write-Host 'You chose option #1'
            CheckRegDNS
        } '2' {
            Write-Host 'You chose option #2'
            SetDNSRegWorkaround
        } 'Q' {
            return
        }
    }
    }
    until ($HumanInput -eq 'q')

}


